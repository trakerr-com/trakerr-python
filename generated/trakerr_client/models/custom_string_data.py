# coding: utf-8

"""
    Trakerr API

    Get your application events and errors to Trakerr via the *Trakerr API*.

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CustomStringData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, custom_data1=None, custom_data2=None, custom_data3=None, custom_data4=None, custom_data5=None, custom_data6=None, custom_data7=None, custom_data8=None, custom_data9=None, custom_data10=None):
        """
        CustomStringData - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'custom_data1': 'str',
            'custom_data2': 'str',
            'custom_data3': 'str',
            'custom_data4': 'str',
            'custom_data5': 'str',
            'custom_data6': 'str',
            'custom_data7': 'str',
            'custom_data8': 'str',
            'custom_data9': 'str',
            'custom_data10': 'str'
        }

        self.attribute_map = {
            'custom_data1': 'customData1',
            'custom_data2': 'customData2',
            'custom_data3': 'customData3',
            'custom_data4': 'customData4',
            'custom_data5': 'customData5',
            'custom_data6': 'customData6',
            'custom_data7': 'customData7',
            'custom_data8': 'customData8',
            'custom_data9': 'customData9',
            'custom_data10': 'customData10'
        }

        self._custom_data1 = custom_data1
        self._custom_data2 = custom_data2
        self._custom_data3 = custom_data3
        self._custom_data4 = custom_data4
        self._custom_data5 = custom_data5
        self._custom_data6 = custom_data6
        self._custom_data7 = custom_data7
        self._custom_data8 = custom_data8
        self._custom_data9 = custom_data9
        self._custom_data10 = custom_data10

    @property
    def custom_data1(self):
        """
        Gets the custom_data1 of this CustomStringData.


        :return: The custom_data1 of this CustomStringData.
        :rtype: str
        """
        return self._custom_data1

    @custom_data1.setter
    def custom_data1(self, custom_data1):
        """
        Sets the custom_data1 of this CustomStringData.


        :param custom_data1: The custom_data1 of this CustomStringData.
        :type: str
        """

        self._custom_data1 = custom_data1

    @property
    def custom_data2(self):
        """
        Gets the custom_data2 of this CustomStringData.


        :return: The custom_data2 of this CustomStringData.
        :rtype: str
        """
        return self._custom_data2

    @custom_data2.setter
    def custom_data2(self, custom_data2):
        """
        Sets the custom_data2 of this CustomStringData.


        :param custom_data2: The custom_data2 of this CustomStringData.
        :type: str
        """

        self._custom_data2 = custom_data2

    @property
    def custom_data3(self):
        """
        Gets the custom_data3 of this CustomStringData.


        :return: The custom_data3 of this CustomStringData.
        :rtype: str
        """
        return self._custom_data3

    @custom_data3.setter
    def custom_data3(self, custom_data3):
        """
        Sets the custom_data3 of this CustomStringData.


        :param custom_data3: The custom_data3 of this CustomStringData.
        :type: str
        """

        self._custom_data3 = custom_data3

    @property
    def custom_data4(self):
        """
        Gets the custom_data4 of this CustomStringData.


        :return: The custom_data4 of this CustomStringData.
        :rtype: str
        """
        return self._custom_data4

    @custom_data4.setter
    def custom_data4(self, custom_data4):
        """
        Sets the custom_data4 of this CustomStringData.


        :param custom_data4: The custom_data4 of this CustomStringData.
        :type: str
        """

        self._custom_data4 = custom_data4

    @property
    def custom_data5(self):
        """
        Gets the custom_data5 of this CustomStringData.


        :return: The custom_data5 of this CustomStringData.
        :rtype: str
        """
        return self._custom_data5

    @custom_data5.setter
    def custom_data5(self, custom_data5):
        """
        Sets the custom_data5 of this CustomStringData.


        :param custom_data5: The custom_data5 of this CustomStringData.
        :type: str
        """

        self._custom_data5 = custom_data5

    @property
    def custom_data6(self):
        """
        Gets the custom_data6 of this CustomStringData.


        :return: The custom_data6 of this CustomStringData.
        :rtype: str
        """
        return self._custom_data6

    @custom_data6.setter
    def custom_data6(self, custom_data6):
        """
        Sets the custom_data6 of this CustomStringData.


        :param custom_data6: The custom_data6 of this CustomStringData.
        :type: str
        """

        self._custom_data6 = custom_data6

    @property
    def custom_data7(self):
        """
        Gets the custom_data7 of this CustomStringData.


        :return: The custom_data7 of this CustomStringData.
        :rtype: str
        """
        return self._custom_data7

    @custom_data7.setter
    def custom_data7(self, custom_data7):
        """
        Sets the custom_data7 of this CustomStringData.


        :param custom_data7: The custom_data7 of this CustomStringData.
        :type: str
        """

        self._custom_data7 = custom_data7

    @property
    def custom_data8(self):
        """
        Gets the custom_data8 of this CustomStringData.


        :return: The custom_data8 of this CustomStringData.
        :rtype: str
        """
        return self._custom_data8

    @custom_data8.setter
    def custom_data8(self, custom_data8):
        """
        Sets the custom_data8 of this CustomStringData.


        :param custom_data8: The custom_data8 of this CustomStringData.
        :type: str
        """

        self._custom_data8 = custom_data8

    @property
    def custom_data9(self):
        """
        Gets the custom_data9 of this CustomStringData.


        :return: The custom_data9 of this CustomStringData.
        :rtype: str
        """
        return self._custom_data9

    @custom_data9.setter
    def custom_data9(self, custom_data9):
        """
        Sets the custom_data9 of this CustomStringData.


        :param custom_data9: The custom_data9 of this CustomStringData.
        :type: str
        """

        self._custom_data9 = custom_data9

    @property
    def custom_data10(self):
        """
        Gets the custom_data10 of this CustomStringData.


        :return: The custom_data10 of this CustomStringData.
        :rtype: str
        """
        return self._custom_data10

    @custom_data10.setter
    def custom_data10(self, custom_data10):
        """
        Sets the custom_data10 of this CustomStringData.


        :param custom_data10: The custom_data10 of this CustomStringData.
        :type: str
        """

        self._custom_data10 = custom_data10

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
