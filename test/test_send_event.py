# coding: utf-8

"""
    Trakerr API

    Get your application events and errors to Trakerr via the *Trakerr API*.

    OpenAPI spec version: 1.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import time
import unittest

from datetime import datetime
from trakerr import Trakerr
from trakerr import TrakerrClient

class TestTrakerrIO(unittest.TestCase):
    """ TrakerrIO Test Suite """

    def setUp(self):
        tdo = datetime.utcnow() - TrakerrClient.EPOCH_CONSTANT
        ver = " ".join(("Python", str(tdo.total_seconds() * 1000)))
        self.client = TrakerrClient("898152e031aadc285c3d84aeeb3c1e386735434729425", ver, "CICD Tests")

    def tearDown(self):
        TrakerrClient.shutdown()

    def test_debug(self):
        time.sleep(3)

        for _ in range(1, 10):
            appevent = self.client.create_new_app_event("debug", "debug", "Debug", "Test Debug", False)
            appevent.context_app_browser = "Chrome"
            appevent.context_app_browser_version = "67.x"

            appevent.event_user = "john@traker.io"
            appevent.event_session = "6"

            appevent.context_operation_time_millis = 2000
            appevent.context_device = "pc"
            appevent.context_app_sku = "mobile"
            appevent.context_tags = ["client", "frontend"]

            response = self.client.send_event(appevent)
            self.assertIs(response[0], None)
            self.assertEqual(response[1], 200)

    def test_info(self):
        time.sleep(3)

        for _ in range(1, 10):
            appevent = self.client.create_new_app_event("info", "info", "Info", "Test Info", False)
            appevent.context_app_browser = "Chrome"
            appevent.context_app_browser_version = "67.x"

            appevent.event_user = "john@traker.io"
            appevent.event_session = "6"

            appevent.context_operation_time_millis = 2000
            appevent.context_device = "pc"
            appevent.context_app_sku = "mobile"
            appevent.context_tags = ["client", "frontend"]

            response = self.client.send_event(appevent)
            self.assertIs(response[0], None)
            self.assertEqual(response[1], 200)

    def test_warn(self):
        time.sleep(3)

        for _ in range(1, 10):
            appevent = self.client.create_new_app_event("warn", "warn", "Warning", "Test Warning", False)
            appevent.context_app_browser = "Chrome"
            appevent.context_app_browser_version = "67.x"

            appevent.event_user = "john@traker.io"
            appevent.event_session = "6"

            appevent.context_operation_time_millis = 2000
            appevent.context_device = "pc"
            appevent.context_app_sku = "mobile"
            appevent.context_tags = ["client", "frontend"]

            response = self.client.send_event(appevent)
            self.assertIs(response[0], None)
            self.assertEqual(response[1], 200)

    def test_fatal(self):
        """
        Test error
        """
        time.sleep(3)

        for _ in range(1, 10):
            #Built in python handler
            #Sending an error(or non-error) with custom data without the logger
            try:
                raise EOFError("File error.")
            except:
                appevent = self.client.create_new_app_event("fatal", "fatal", exc_info=True)

                #Populate any field with your own data, or send your own custom data
                appevent.context_app_browser = "Chrome"
                appevent.context_app_browser_version = "67.x"

                appevent.event_user = "john@traker.io"
                appevent.event_session = "6"

                appevent.context_operation_time_millis = 2000
                appevent.context_device = "pc"
                appevent.context_app_sku = "mobile"
                appevent.context_tags = ["client", "frontend"]

                #Send it to trakerr
                response = self.client.send_event(appevent)
                self.assertIs(response[0], None)
                self.assertEqual(response[1], 200)

    def test_error(self):
        """
        Test error
        """
        time.sleep(3)

        for _ in range(1, 10):
            #Built in python handler
            #Sending an error(or non-error) with custom data without the logger
            try:
                raise IndexError("Index out of bounds.")
            except:
                appevent = self.client.create_new_app_event("error", "error", exc_info=True)

                #Populate any field with your own data, or send your own custom data
                appevent.context_app_browser = "Chrome"
                appevent.context_app_browser_version = "67.x"

                #Can support multiple ways to input data
                #appevent.custom_properties = CustomData("Custom Data holder!")
                #appevent.custom_properties.string_data = CustomStringData("Custom String Data 1",
                #                                                          "Custom String Data 2")
                #appevent.custom_properties.string_data.custom_data3 = "More Custom Data!"
                appevent.event_user = "john@traker.io"
                appevent.event_session = "6"

                appevent.context_operation_time_millis = 1000
                appevent.context_device = "pc"
                appevent.context_app_sku = "mobile"
                appevent.context_tags = ["client", "frontend"]

                #Send it to trakerr
                response = self.client.send_event(appevent)
                self.assertIs(response[0], None)
                self.assertEqual(response[1], 200)

if __name__ == '__main__':
    unittest.main()
